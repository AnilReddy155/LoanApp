package com.cg.service;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.cg.constants.AppConstants;
import com.cg.entity.CustomerApproval;
import com.cg.model.CustomerDTO;
import com.cg.repo.CustomerApprovalRepository;
import com.cg.util.KafkaProducerHelper;

@Service
public class CustomerApprovalService {

    @Autowired
    private CustomerApprovalRepository customerApprovalRepository;
    
    @Autowired
    private KafkaProducerHelper kafkaProducerHelper;
    
    public void processForApproval(CustomerDTO customerDTO) {
    	CustomerApproval customerApproval = new CustomerApproval();
    	customerApproval.setCustomerId(customerDTO.getId());
    	customerApproval.setStatus(AppConstants.STATUS_PENDING);
    	customerApproval.setAdminId(1L); //this can be configured that which admin should review this account.
    	customerApproval.setCreatedAt(Timestamp.from(Instant.now()));
    	customerApproval.setUpdatedAt(Timestamp.from(Instant.now()));
    	
    	
    	customerApprovalRepository.save(customerApproval);
    }
    
    @Scheduled(fixedRate = 5000)
    public void processCustomerApproval() throws Exception{
    	
    	
    	
    	customerApprovalRepository.findAllByStatus(AppConstants.STATUS_PENDING).stream().map(customerApproval -> {
    		// write a logic for customer approval.
    		
    		customerApproval.setStatus(AppConstants.STATUS_APPROVED);
    		return customerApproval;
    	}).forEach(customerApproval -> kafkaProducerHelper.sendMessage(customerApproval));;
    }

    public CustomerApproval createCustomerApproval(CustomerApproval customerApproval) {
        return customerApprovalRepository.save(customerApproval);
    }

    public Optional<CustomerApproval> getCustomerApprovalById(Long id) {
        return customerApprovalRepository.findById(id);
    }

    public CustomerApproval updateCustomerApproval(CustomerApproval customerApproval) {
        if (customerApprovalRepository.existsById(customerApproval.getId())) {
            return customerApprovalRepository.save(customerApproval);
        }
        throw new RuntimeException("Customer Approval not found");
    }

    public void deleteCustomerApproval(Long id) {
        if (customerApprovalRepository.existsById(id)) {
            customerApprovalRepository.deleteById(id);
        } else {
            throw new RuntimeException("Customer Approval not found");
        }
    }

}
